akka {
  loglevel = "INFO"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  coordinated-shutdown.exit-jvm = on

  actor {
    provider = cluster
    warn-about-java-serializer-usage = on
    allow-java-serialization = on

    serializers {
      purpose-added = "it.pagopa.pdnd.interop.uservice.purposemanagement.model.persistence.serializer.PurposeAddedSerializer"
      purpose-activated = "it.pagopa.pdnd.interop.uservice.purposemanagement.model.persistence.serializer.PurposeActivatedSerializer"
      purpose-suspended = "it.pagopa.pdnd.interop.uservice.purposemanagement.model.persistence.serializer.PurposeSuspendedSerializer"
      purpose-deactivated = "it.pagopa.pdnd.interop.uservice.purposemanagement.model.persistence.serializer.PurposeArchivedSerializer"
      state = "it.pagopa.pdnd.interop.uservice.purposemanagement.model.persistence.serializer.StateSerializer"
    }
    serialization-identifiers {
      "it.pagopa.pdnd.interop.uservice.purposemanagement.model.persistence.serializer.PurposeAddedSerializer" = 100000
      "it.pagopa.pdnd.interop.uservice.purposemanagement.model.persistence.serializer.PurposeActivatedSerializer" = 100002
      "it.pagopa.pdnd.interop.uservice.purposemanagement.model.persistence.serializer.PurposeSuspendedSerializer" = 100003
      "it.pagopa.pdnd.interop.uservice.purposemanagement.model.persistence.serializer.PurposeArchivedSerializer" = 100004
      "it.pagopa.pdnd.interop.uservice.purposemanagement.model.persistence.serializer.StateSerializer" = 200000
      "java.io.serializable" = none
    }
    serialization-bindings {
      "it.pagopa.pdnd.interop.uservice.purposemanagement.model.persistence.PurposeAdded" = purpose-added
      "it.pagopa.pdnd.interop.uservice.purposemanagement.model.persistence.PurposeActivated" = purpose-activated
      "it.pagopa.pdnd.interop.uservice.purposemanagement.model.persistence.PurposeSuspended" = purpose-suspended
      "it.pagopa.pdnd.interop.uservice.purposemanagement.model.persistence.PurposeArchived" = purpose-deactivated
      "it.pagopa.pdnd.interop.uservice.purposemanagement.model.persistence.State" = state
    }
  }

  cluster {
    shutdown-after-unsuccessful-join-seed-nodes = 60s
    sharding {
      number-of-shards = 60 //number of nodes * 10
    }
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
  }

  typed {
    stash-capacity = 200000
  }

  management {
    http {
      bind-hostname = 0.0.0.0
      route-providers-read-only = false
    }
    cluster.bootstrap {
      contact-point-discovery {
        discovery-method = kubernetes-api
        required-contact-point-nr = ${?REQUIRED_CONTACT_POINT_NR}
      }
    }
    health-checks {
      readiness-checks {
        ready = "it.pagopa.pdnd.interop.uservice.purposemanagement.server.impl.HealthCheck"
      }
      liveness-checks {
        live = "it.pagopa.pdnd.interop.uservice.purposemanagement.server.impl.LiveCheck"
      }
    }
  }
}

uservice-purpose-management {
  idle-timeout = 60 seconds
  number-of-events-before-snapshot = 1000
  persistence = "memory"
  port = 8088
}